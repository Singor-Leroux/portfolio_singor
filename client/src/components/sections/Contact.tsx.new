import React, { useState, useEffect } from 'react';
import { 
  Send, 
  MapPin, 
  Phone, 
  Mail, 
  Github as GitHub, 
  Linkedin, 
  Twitter, 
  AlertCircle, 
  CheckCircle 
} from 'lucide-react';
import { useUser } from '../../contexts/UserContext';
import { FormattedUserProfile } from '../../types/user';
import { sendContactMessage } from '../../services/contactService';

const Contact: React.FC = () => {
  const { userData, loading } = useUser() as { 
    userData: FormattedUserProfile; 
    loading: boolean;
  };

  if (loading || !userData) {
    return (
      <section id="contact" className="py-20 bg-gray-50 dark:bg-gray-900">
        <div className="container mx-auto px-4">
          <div className="animate-pulse h-8 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mx-auto mb-4"></div>
          <div className="w-20 h-1 bg-blue-600 mx-auto mb-8"></div>
          <div className="animate-pulse h-64 bg-gray-200 dark:bg-gray-700 rounded-lg"></div>
        </div>
      </section>
    );
  }

  const [formData, setFormData] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{
    success: boolean;
    message: string;
  } | null>(null);
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };
  
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (isSubmitting) return;
    
    setIsSubmitting(true);
    setSubmitStatus(null);
    
    try {
      const result = await sendContactMessage(formData);
      
      if (result.success) {
        // Réinitialiser le formulaire en cas de succès
        setFormData({
          name: '',
          email: '',
          subject: '',
          message: ''
        });
        
        setSubmitStatus({
          success: true,
          message: 'Votre message a été envoyé avec succès ! Je vous répondrai dès que possible.'
        });
      } else {
        setSubmitStatus({
          success: false,
          message: result.error || 'Une erreur est survenue lors de l\'envoi du message.'
        });
      }
    } catch (error) {
      console.error('Erreur inattendue:', error);
      setSubmitStatus({
        success: false,
        message: 'Une erreur inattendue est survenue. Veuillez réessayer plus tard.'
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  // Effet pour effacer le message de statut après 10 secondes
  useEffect(() => {
    if (submitStatus) {
      const timer = setTimeout(() => {
        setSubmitStatus(null);
      }, 10000);
      
      return () => clearTimeout(timer);
    }
  }, [submitStatus]);

  return (
    <section id="contact" className="py-20 bg-gray-50 dark:bg-gray-900">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-3xl md:text-4xl font-bold text-gray-900 dark:text-gray-200 mb-4">
            Me Contacter
          </h2>
          <div className="w-20 h-1 bg-blue-600 mx-auto mb-6"></div>
          <p className="text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
            Vous avez un projet en tête ou vous souhaitez simplement discuter ? N'hésitez pas à me contacter !
          </p>
        </div>
        
        <div className="flex flex-col lg:flex-row gap-12">
          <div className="lg:w-2/5 dark:bg-gray-700 dark:p-8 dark:rounded-xl">
            <h3 className="text-2xl font-semibold text-gray-800 dark:text-blue-400 mb-6">
              Informations de contact
            </h3>
            
            <div className="space-y-6 mb-8">
              <div className="flex items-start space-x-4">
                <div className="bg-blue-100 p-3 rounded-lg">
                  <MapPin className="text-blue-600" />
                </div>
                <div>
                  <h4 className="font-medium text-gray-800 dark:text-gray-300 mb-1">Localisation</h4>
                  <p className="text-gray-600 dark:text-blue-400">{userData.address}</p>
                </div>
              </div>
              
              <div className="flex items-start space-x-4">
                <div className="bg-blue-100 p-3 rounded-lg">
                  <Mail className="text-blue-600" />
                </div>
                <div>
                  <h4 className="font-medium text-gray-800 dark:text-gray-300 mb-1">Email</h4>
                  <a href={`mailto:${userData.email}`} className="text-gray-600 dark:text-blue-400 hover:text-blue-600 dark:hover:text-blue-300 transition-colors">
                    {userData.email}
                  </a>
                </div>
              </div>
              
              <div className="flex items-start space-x-4">
                <div className="bg-blue-100 p-3 rounded-lg">
                  <Phone className="text-blue-600" />
                </div>
                <div>
                  <h4 className="font-medium text-gray-800 dark:text-gray-300 mb-1">Téléphone</h4>
                  {userData.phone ? (
                    <a href={`tel:${userData.phone}`} className="text-gray-600 dark:text-blue-400 hover:text-blue-600 dark:hover:text-blue-300 transition-colors">
                      {userData.phone}
                    </a>
                  ) : (
                    <span className="text-gray-400">Non spécifié</span>
                  )}
                </div>
              </div>
            </div>
            
            <h4 className="font-medium text-gray-800 dark:text-blue-400 mb-4">
              Suivez-moi
            </h4>
            
            <div className="flex space-x-4">
              <a 
                href={userData.socialLinks?.github || '#'}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm hover:shadow-md hover:text-blue-600 dark:hover:text-white dark:hover:bg-blue-500 transition-all duration-300"
                aria-label="GitHub"
              >
                <GitHub />
              </a>
              <a 
                href={userData.socialLinks?.linkedin || '#'}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm hover:shadow-md hover:text-blue-600 dark:hover:text-white dark:hover:bg-blue-500 transition-all duration-300"
                aria-label="LinkedIn"
              >
                <Linkedin />
              </a>
              <a 
                href={userData.socialLinks?.twitter || '#'}
                target="_blank"
                rel="noopener noreferrer"
                className="bg-white dark:bg-gray-800 p-3 rounded-lg shadow-sm hover:shadow-md hover:text-blue-600 dark:hover:text-white dark:hover:bg-blue-500 transition-all duration-300"
                aria-label="Twitter"
              >
                <Twitter />
              </a>
            </div>
          </div>
          
          <div className="lg:w-3/5">
            <div className="bg-white dark:bg-gray-700 rounded-xl shadow-md p-8">
              <h3 className="text-2xl font-semibold text-gray-800 dark:text-white mb-6">
                Envoyez-moi un message
              </h3>
              
              {submitStatus ? (
                <div className={`p-4 rounded-lg mb-6 ${
                  submitStatus.success 
                    ? 'bg-green-50 border border-green-200 text-green-700' 
                    : 'bg-red-50 border border-red-200 text-red-700'
                }`}>
                  <div className="flex items-start">
                    {submitStatus.success ? (
                      <CheckCircle className="h-5 w-5 text-green-500 mr-2 mt-0.5 flex-shrink-0" />
                    ) : (
                      <AlertCircle className="h-5 w-5 text-red-500 mr-2 mt-0.5 flex-shrink-0" />
                    )}
                    <div>
                      <p className="font-medium">
                        {submitStatus.success ? 'Message envoyé avec succès !' : 'Erreur lors de l\'envoi'}
                      </p>
                      <p>{submitStatus.message}</p>
                    </div>
                  </div>
                </div>
              ) : null}
              
              <form onSubmit={handleSubmit}>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <div>
                    <label htmlFor="name" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Nom complet
                    </label>
                    <input
                      id="name"
                      name="name"
                      type="text"
                      required
                      value={formData.name}
                      onChange={handleChange}
                      className="w-full px-4 py-2.5 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-blue-500 dark:focus:border-blue-400 text-gray-900 dark:text-white"
                      placeholder="Votre nom"
                      disabled={isSubmitting}
                    />
                  </div>
                  
                  <div>
                    <label htmlFor="email" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                      Adresse email
                    </label>
                    <input
                      id="email"
                      name="email"
                      type="email"
                      required
                      value={formData.email}
                      onChange={handleChange}
                      className="w-full px-4 py-2.5 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-blue-500 dark:focus:border-blue-400 text-gray-900 dark:text-white"
                      placeholder="Votre email"
                      disabled={isSubmitting}
                    />
                  </div>
                </div>
                
                <div className="mb-6">
                  <label htmlFor="subject" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Sujet
                  </label>
                  <input
                    id="subject"
                    name="subject"
                    type="text"
                    required
                    value={formData.subject}
                    onChange={handleChange}
                    className="w-full px-4 py-2.5 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-blue-500 dark:focus:border-blue-400 text-gray-900 dark:text-white"
                    placeholder="Sujet de votre message"
                    disabled={isSubmitting}
                  />
                </div>
                
                <div className="mb-6">
                  <label htmlFor="message" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Message
                  </label>
                  <textarea
                    id="message"
                    name="message"
                    rows={5}
                    required
                    value={formData.message}
                    onChange={handleChange}
                    className="w-full px-4 py-2.5 bg-gray-50 dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 focus:border-blue-500 dark:focus:border-blue-400 text-gray-900 dark:text-white"
                    placeholder="Votre message..."
                    disabled={isSubmitting}
                  ></textarea>
                </div>
                
                <button
                  type="submit"
                  disabled={isSubmitting}
                  className={`flex items-center justify-center w-full md:w-auto px-8 py-3 ${
                    isSubmitting 
                      ? 'bg-blue-500' 
                      : 'bg-blue-600 hover:bg-blue-700'
                  } text-white rounded-lg transition-colors ${
                    isSubmitting ? 'opacity-75 cursor-not-allowed' : ''
                  }`}
                >
                  {isSubmitting ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Envoi en cours...
                    </>
                  ) : (
                    <>
                      <span>Envoyer le message</span>
                      <Send size={16} className="ml-2" />
                    </>
                  )}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Contact;
