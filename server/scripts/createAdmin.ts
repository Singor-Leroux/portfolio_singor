import mongoose from 'mongoose';
import dotenv from 'dotenv';
import bcrypt from 'bcryptjs';
import User from '../src/models/user.model';

// Charger les variables d'environnement
dotenv.config({ path: '../.env' });

const createAdmin = async () => {
  try {
    // V√©rifier les variables d'environnement n√©cessaires
    if (!process.env.MONGODB_URI) {
      console.error('Erreur: MONGODB_URI n\'est pas d√©fini dans le fichier .env');
      process.exit(1);
    }

    // Connexion √† la base de donn√©es
    console.log('Connexion √† la base de donn√©es...');
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('Connect√© √† la base de donn√©es');

    // V√©rifier si l'admin existe d√©j√†
    const existingAdmin = await User.findOne({ email: 'admin@example.com' });
    
    if (existingAdmin) {
      console.log('Un administrateur avec cet email existe d√©j√†');
      await mongoose.connection.close();
      process.exit(0);
    }

    // Cr√©er le mot de passe hach√©
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash('admin123', salt);

    // Cr√©er l'utilisateur admin
    const admin = new User({
      name: 'Administrateur',
      email: 'admin@example.com',
      password: hashedPassword,
      role: 'admin',
      isEmailVerified: true
    });

    await admin.save();
    
    console.log('\n‚úÖ Compte administrateur cr√©√© avec succ√®s!');
    console.log('üìß Email: admin@example.com');
    console.log('üîë Mot de passe: admin123');
    console.log('\n‚ö†Ô∏è  IMPORTANT: Changez ce mot de passe imm√©diatement apr√®s la premi√®re connexion!\n');
    
    await mongoose.connection.close();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la cr√©ation du compte administrateur:');
    console.error(error);
    process.exit(1);
  }
};

// Ex√©cuter la fonction
createAdmin();
